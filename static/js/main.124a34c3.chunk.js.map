{"version":3,"sources":["Tab.js","App.js","serviceWorker.js","index.js"],"names":["Tab","value","onClick","App","handleChange","newValue","setState","currentValue","string","Date","toLocaleString","timeZone","console","log","state","handleClick","Value","absolute","bind","handleToggle","this","str","hours","slice","minutes","getSeconds","options","useCustomTime","width","border","borderColor","baseColor","centerColor","handColors","second","minute","hour","id","style","defaultValue","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.124a34c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Tab.css';\r\n\r\nconst Tab = ({value,onClick}) =>{\r\n\r\n\treturn(\r\n\r\n\t\t\t<button  onClick={onClick} > {value}</button>\r\n\r\n\r\n\r\n\t);\r\n\r\n}\r\n\r\nexport default Tab;","import React, { Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport TimezonePicker from 'react-bootstrap-timezone-picker';\nimport 'react-bootstrap-timezone-picker/dist/react-bootstrap-timezone-picker.min.css';\nimport './App.css';\nimport Tab from './Tab';\nimport AnalogClock from 'analog-clock-react';\n\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = { currentValue: 'Asia/Jerusalem', absolute: false, string:new Date().toLocaleString(\"en-US\", {timeZone: 'Asia/Jerusalem'}) };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n\n  }  \n\n\n\n  handleChange=(newValue) =>{\n    if(newValue!='')\n    this.setState({ currentValue: newValue ,string:new Date().toLocaleString(\"en-US\", {timeZone: newValue}) });\n    console.log(this.state.currentValue);\n  }\n\n  handleClick=(Value)=>{\n   this.handleChange(Value);\n  }\n\n  handleToggle() {\n    this.setState({ absolute: !this.state.absolute ,});\n  }\n  \n\n\n  render(){ \n\n    const timezonestyle={\n    'width': '24em',\n    'border-radius':'10px',\n    'padding':'10px',\n    'background-color':'cadetblue',\n    'border':'1px solid black',\n    'font-size':'1em',\n    'color':'wheat',\n    'cursor':'pointer'\n    };\n   \n\n    let str= this.state.string;  \n    let hours =str.slice(-11,-9); \n    let minutes =str.slice(-8,-6); \n    let seconds = new Date().getSeconds(); \n    console.log(minutes);      \n    let options={\n      useCustomTime: true,    // set this to true\n      width: \"220px\",\n      border: true,\n      borderColor: \"bisque\",\n      baseColor: \"#ABD6DFFF\",\n      centerColor: \"steelblue\",\n      handColors: {\n      second: \"transparent\",\n      minute: \"#fff\",\n      hour: \"#fff\"\n      },\n\n      \"seconds\": null,   // set your\n      \"minutes\": minutes,  // own\n      \"hours\": hours     // time here.\n    }\n\n\n\n    return (\n    <div id=\"container\">\n      <div id = \"nav\">\n      <ul id=\"navlist\">\n        <li  style={{'text-transform':'uppercase'}} id=\"online\">Online tool to find other time zones</li>\n        </ul>\n\n      </div>\n\n      <div id=\"divone\" >\n        <p id=\"choose\" >Choose time zone:</p>\n        <TimezonePicker \n            absolute      = {false}\n            defaultValue  = 'Asia/Jerusalem'\n            placeholder   = \"Select timezone...\"\n            onChange      = {this.handleChange}\n            id= \"Timezone\" \n            style = {timezonestyle}        \n          />\n\n          \n      </div>\n\n      <div id=\"buttonsdiv\">\n        <Tab onClick={()=>this.handleClick('Australia/Darwin')} value=\"Australia Central\"/>\n        <Tab onClick={()=>this.handleClick('Australia/Brisbane')} value=\"Australia Eastern\"/>\n        <Tab onClick={()=>this.handleClick('Asia/Shanghai')} value=\"China\"/>\n        <Tab onClick={()=>this.handleClick('Europe/London')} value=\"London\"/>\n        <Tab onClick={()=>this.handleClick('Europe/Berlin')} value=\"Berlin\"/>\n        <Tab onClick={()=>this.handleClick('America/Los_Angeles')} value=\"Los Angeles\"/>\n        <Tab onClick={()=>this.handleClick('America/New_York')} value=\"New York\"/>\n        <Tab onClick={()=>this.handleClick('America/Chicago')} value=\"Chicago\"/>\n        <Tab onClick={()=>this.handleClick('Pacific/Honolulu')} value=\"Hawaii\"/>  \n      </div>\n\n      <div  id=\"Analog\"> \n        <AnalogClock {...options}/>\n        <div id=\"tzline\"><p>Time: {this.state.string}</p></div>\n      </div>\n\n\n    </div>\n    );\n  }\n};\n\n\n\nexport default App;\n\n\n  /*\nEurope/London`\n\n\n\n  */","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\t\n\t    <App/>\n\t \n,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}